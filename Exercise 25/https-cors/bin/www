#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-app:server');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var secPort = normalizePort(process.env.SecPort || '3443');
app.set('port', port);
app.set('secPort', secPort);
const httpsOptions = {
  key: fs.readFileSync(__dirname + '/key.pem'),
  cert: fs.readFileSync(__dirname + '/cert.pem')
};

// var server = https.createServer(httpsOptions, app);

// server.listen(app.get('port'), () => {
//   console.log('Server is running on port ', app.get('port'));
// });
// server.listen(app.get('secPort'), () => {
//   console.log('Server is running on port ', app.get('secPort'));
// });
// // server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

// Tạo 2 server HTTPS riêng biệt
var server1 = https.createServer(httpsOptions, app);
var server2 = https.createServer(httpsOptions, app);

// Lắng nghe trên cả 2 cổng HTTPS
server1.listen(port, () => {
  console.log('HTTPS Server is running on port', port);
});
server2.listen(secPort, () => {
  console.log('HTTPS Server is running on port', secPort);
});

// Xử lý lỗi
server1.on('error', (error) => onError(error, port));
server2.on('error', (error) => onError(error, secPort));

server1.on('listening', () => onListening(server1, 'HTTPS (port ' + port + ')'));
server2.on('listening', () => onListening(server2, 'HTTPS (port ' + secPort + ')'));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server, port) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
